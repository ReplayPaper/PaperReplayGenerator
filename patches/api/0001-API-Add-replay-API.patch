From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Fritz Windisch <friwidev@gmail.com>
Date: Mon, 24 Jul 2023 21:35:32 +0200
Subject: [PATCH] API: Add replay API


diff --git a/src/main/java/me/friwi/replay/RecordingCreator.java b/src/main/java/me/friwi/replay/RecordingCreator.java
new file mode 100644
index 0000000000000000000000000000000000000000..fb3642934874c963c2fe1345466bb5910eac237f
--- /dev/null
+++ b/src/main/java/me/friwi/replay/RecordingCreator.java
@@ -0,0 +1,124 @@
+/*
+Paper ReplayMod Recording Creator
+Copyright (C) 2023 FriwiDev
+
+This program is free software: you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation, either version 3 of the License, or
+(at your option) any later version.
+
+This program is distributed in the hope that it will be useful,
+but WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+GNU General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+package me.friwi.replay;
+
+import net.kyori.adventure.text.Component;
+import org.bukkit.Color;
+import org.bukkit.Location;
+import org.bukkit.World;
+import org.jetbrains.annotations.NotNull;
+
+import java.awt.image.BufferedImage;
+import java.io.File;
+import java.util.Collection;
+import java.util.List;
+import java.util.UUID;
+import java.util.function.Consumer;
+
+public interface RecordingCreator {
+    /**
+     * Record begin and finalization
+     */
+    void beginRecording();
+
+    void endRecording(@NotNull Consumer<File> onComplete);
+
+    @NotNull
+    BufferedImage getThumbnail();
+
+    /**
+     * Settings for the whole file
+     */
+    void setThumbnail(@NotNull BufferedImage image);
+
+    @NotNull
+    String getCustomServerName();
+
+    void setCustomServerName(@NotNull String customServerName);
+
+    @NotNull
+    String getServerIP();
+
+    void setServerIP(@NotNull String serverIP);
+
+    void setTablistHeaderFooter(@NotNull String header, @NotNull String footer);
+
+    void setTablistHeaderFooter(@NotNull Component header, @NotNull Component footer);
+
+    void setPlayerListName(@NotNull UUID uuid, @NotNull String listName);
+
+    void createObjective(@NotNull String objectiveName, @NotNull String text);
+
+    void createObjective(@NotNull String objectiveName, @NotNull String text, boolean displayAsHeart);
+
+    void displayObjectiveList(@NotNull String objectiveName);
+
+    void displayObjectiveSidebar(@NotNull String objectiveName);
+
+    void displayObjectiveBelowName(@NotNull String objectiveName);
+
+    void createTeam(@NotNull String team, @NotNull Color color, @NotNull String displayName, @NotNull String prefix, @NotNull String suffix, @NotNull Collection<String> players);
+
+    @NotNull
+    Collection<UUID> getOccuringPlayers();
+
+    @NotNull
+    World getWorld();
+
+    boolean addResourcePack(@NotNull File file);
+
+    boolean removeResourcePack(@NotNull File file);
+
+    @NotNull
+    List<File> getAllResourcePacks();
+
+    /**
+     * Time dependent settings
+     */
+    void appendPacket(@NotNull Object packet);
+
+    void appendPacketWithLocation(@NotNull Object packet, @NotNull Location location);
+
+    void appendPacketWithLocation(@NotNull Object packet, int x, int y, int z);
+
+    void appendPacketWithChunkLocation(@NotNull Object packet, int cx, int cz);
+
+    void addChat(@NotNull String message);
+
+    void addChat(@NotNull Component component);
+
+    void addOrUpdateScore(@NotNull String score, @NotNull String objectiveName, int value);
+
+    void removeScore(@NotNull String score);
+
+    void removeTeam(@NotNull String team);
+
+    void updateTeamInfo(@NotNull String team, @NotNull Color color, @NotNull String displayName, @NotNull String prefix, @NotNull String suffix);
+
+    void addPlayersToTeam(@NotNull String team, @NotNull Collection<String> players);
+
+    void removePlayersFromTeam(@NotNull String team, @NotNull Collection<String> players);
+
+    /**
+     * Utils
+     */
+    boolean isLocationRelevant(@NotNull Location loc);
+
+    boolean isActive();
+}
diff --git a/src/main/java/me/friwi/replay/RecordingFactory.java b/src/main/java/me/friwi/replay/RecordingFactory.java
new file mode 100644
index 0000000000000000000000000000000000000000..dc7b492b7871df7f8ff4288cf2ac2b55e66c5fb6
--- /dev/null
+++ b/src/main/java/me/friwi/replay/RecordingFactory.java
@@ -0,0 +1,30 @@
+/*
+Paper ReplayMod Recording Creator
+Copyright (C) 2023 FriwiDev
+
+This program is free software: you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation, either version 3 of the License, or
+(at your option) any later version.
+
+This program is distributed in the hope that it will be useful,
+but WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+GNU General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+package me.friwi.replay;
+
+import org.bukkit.Location;
+import org.jetbrains.annotations.NotNull;
+
+import java.io.File;
+import java.io.IOException;
+
+public interface RecordingFactory {
+    @NotNull
+    RecordingCreator newRecordingCreator(@NotNull File dir, @NotNull Location spawnLocation, int lcx, int hcx, int lcz, int hcz) throws IOException;
+}
diff --git a/src/main/java/org/bukkit/Server.java b/src/main/java/org/bukkit/Server.java
index 6b72eccdcb6f75534a4267a1dd0a4cc2f39e917b..02d814f9080806277177fc55735072bce953d7cc 100644
--- a/src/main/java/org/bukkit/Server.java
+++ b/src/main/java/org/bukkit/Server.java
@@ -14,6 +14,7 @@ import java.util.Set;
 import java.util.UUID;
 import java.util.function.Consumer;
 import java.util.logging.Logger;
+import me.friwi.replay.RecordingFactory;
 import org.bukkit.Warning.WarningState;
 import org.bukkit.advancement.Advancement;
 import org.bukkit.block.data.BlockData;
@@ -61,7 +62,7 @@ import org.jetbrains.annotations.Nullable;
 /**
  * Represents a server implementation.
  */
-public interface Server extends PluginMessageRecipient, net.kyori.adventure.audience.ForwardingAudience { // Paper
+public interface Server extends PluginMessageRecipient, net.kyori.adventure.audience.ForwardingAudience, RecordingFactory { // Paper  // Replays: Add own interface
 
     /**
      * Returns the de facto plugins directory, generally used for storing plugin jars to be loaded,
